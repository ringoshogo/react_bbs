"""
Django settings for bbs project.

Generated by 'django-admin startproject' using Django 2.2.17.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import environ

#環境変数の設定
env = environ.Env()
environ.Env.read_env('.env')


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'vqhog#$lk3_s10#1mq5+c@1%!6$8+hi!tt@sknnb9dc!qxa=k2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
       'django.contrib.staticfiles',
    'api.apps.ApiConfig',
    'rest_framework', #追加
    'rest_framework.authtoken', # 追加
    'rest_auth', # 追加

    # サインアップ(新規登録)
    'allauth', # 追加
    'allauth.account', # 追加
    'allauth.socialaccount', # 追加
    'rest_auth.registration', # 追加
    'django.contrib.sites', # 追加

    'corsheaders',

    'django_filters', #追加 django-filter==2.4.0
    'django_cleanup',#追加 models.ImageFieldで画像削除時にサーバの画像も合わせて削除する

]

#追加 django-filter==2.4.0
REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']
}

# 追加
# EMAIL_BACKENDは、ユーザーの登録した時に Email でも認証確認
EMAIL_BACKEND = ['django.core.mail.backends.console.EmailBackend']
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]
# sites フレームワークの一つで、いくつかの Django プロジェクトからたくさんの Web サイトをホストするため
SITE_ID = 1

#追加
# 画像を保存するAPIサーバの場所
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'
# MEDIA_ROOT + 'images/(元の画像ファイル名) で保存

# 追加
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        # AllowAny、IsAuthenticated、IsAdminUse、IsAuthenticatedOrReadOnly
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [ # 追加
        # SessionAuthentication は、ブラウザにログイン、ログアウトの機能を提供
        'rest_framework.authentication.SessionAuthentication',
        # BasicAuthentication は、セッション ID を HTTP ヘッダに入れて、API に渡す役割
        'rest_framework.authentication.TokenAuthentication',

    ],
   'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema'
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', #追加 => も追加：CORS_ORIGIN_ALLOW_ALL=True
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# cors関連で追加
CORS_ORIGIN_ALLOW_ALL=True

ROOT_URLCONF = 'bbs.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bbs.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': env.db()
    # {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'NAME': 'nani_taberu', #　作成したデータベース名
    #     'USER': 'sennseikou', # ログインユーザー名
    #     'HOST': 'db',
    #     'PORT': '3306',
    #     'PASSWORD': 'password',
    #     'OPTIONS': {
    #         'charset': 'utf8mb4',
    #     }
    # }
}
# DATABASE_URL=mysql://{ユーザー名}:{パスワード}@｛ホスト｝:｛ポート｝/｛データベース名｝

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
