[{"C:\\workSpace1\\react-bbs\\bbs\\src\\index.js":"1","C:\\workSpace1\\react-bbs\\bbs\\src\\App.js":"2","C:\\workSpace1\\react-bbs\\bbs\\src\\reportWebVitals.js":"3","C:\\workSpace1\\react-bbs\\bbs\\src\\store\\reducers\\auth.js":"4","C:\\workSpace1\\react-bbs\\bbs\\src\\store\\reducers\\posts.js":"5","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\Auth\\Logout\\Logout.js":"6","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\Auth\\Auth.js":"7","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\Posts\\Posts.js":"8","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\NewPost\\NewPost.js":"9","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\PostDetails\\PostDetails.js":"10","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\MyPage\\MyPage.js":"11","C:\\workSpace1\\react-bbs\\bbs\\src\\hoc\\Layout\\Layout.js":"12","C:\\workSpace1\\react-bbs\\bbs\\src\\store\\actions\\actionTypes.js":"13","C:\\workSpace1\\react-bbs\\bbs\\src\\store\\actions\\index.js":"14","C:\\workSpace1\\react-bbs\\bbs\\src\\hoc\\Auxirialy.js":"15","C:\\workSpace1\\react-bbs\\bbs\\src\\common\\authConst.js":"16","C:\\workSpace1\\react-bbs\\bbs\\src\\common\\utility.js":"17","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\PostDetails\\Chart\\Chart.js":"18","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\PostDetails\\ResponseDetails\\ResponseDetails.js":"19","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\PostDetails\\ResponseForm\\ReponseForm.js":"20","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\UI\\Button\\Button.js":"21","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\UI\\Modal\\Modal.js":"22","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\UI\\Spinner\\Spinner.js":"23","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Navigation\\Toolbar\\Toolbar.js":"24","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\UI\\Input\\Input.js":"25","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Navigation\\SideDrawer\\SideDrawer.js":"26","C:\\workSpace1\\react-bbs\\bbs\\src\\store\\actions\\posts.js":"27","C:\\workSpace1\\react-bbs\\bbs\\src\\store\\actions\\auth.js":"28","C:\\workSpace1\\react-bbs\\bbs\\src\\common\\commonConst.js":"29","C:\\workSpace1\\react-bbs\\bbs\\src\\common\\formConst.js":"30","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\UI\\Modal\\BackDrop\\BackDrop.js":"31","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Navigation\\DrawToggle\\DrawToggle.js":"32","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Logo\\Logo.js":"33","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Navigation\\NavigationItems\\NavigationItems.js":"34","C:\\workSpace1\\react-bbs\\bbs\\src\\axios-post.js":"35","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Navigation\\NavigationItems\\NavigationItem\\NavigationItem.js":"36","C:\\workSpace1\\react-bbs\\bbs\\src\\common\\cryptoConst.js":"37","C:\\workSpace1\\react-bbs\\bbs\\src\\common\\crypto.js":"38"},{"size":1005,"mtime":1611414905983,"results":"39","hashOfConfig":"40"},{"size":943,"mtime":1612929850650,"results":"41","hashOfConfig":"40"},{"size":362,"mtime":499162500000,"results":"42","hashOfConfig":"40"},{"size":2832,"mtime":1613282444015,"results":"43","hashOfConfig":"40"},{"size":3265,"mtime":1613303561453,"results":"44","hashOfConfig":"40"},{"size":538,"mtime":1612281680440,"results":"45","hashOfConfig":"40"},{"size":8346,"mtime":1613283899787,"results":"46","hashOfConfig":"40"},{"size":1904,"mtime":1613730566763,"results":"47","hashOfConfig":"40"},{"size":4315,"mtime":1613730416332,"results":"48","hashOfConfig":"40"},{"size":6530,"mtime":1613730553809,"results":"49","hashOfConfig":"40"},{"size":5172,"mtime":1613723420804,"results":"50","hashOfConfig":"40"},{"size":1894,"mtime":1613723353304,"results":"51","hashOfConfig":"40"},{"size":896,"mtime":1613303343152,"results":"52","hashOfConfig":"40"},{"size":539,"mtime":1613303393098,"results":"53","hashOfConfig":"40"},{"size":59,"mtime":1610207935751,"results":"54","hashOfConfig":"40"},{"size":1300,"mtime":1612867754720,"results":"55","hashOfConfig":"40"},{"size":1997,"mtime":1612929936418,"results":"56","hashOfConfig":"40"},{"size":2116,"mtime":1613730543975,"results":"57","hashOfConfig":"40"},{"size":3848,"mtime":1613107893780,"results":"58","hashOfConfig":"40"},{"size":5605,"mtime":1613614229207,"results":"59","hashOfConfig":"40"},{"size":310,"mtime":1610590880762,"results":"60","hashOfConfig":"40"},{"size":646,"mtime":1612930024060,"results":"61","hashOfConfig":"40"},{"size":170,"mtime":1612280871848,"results":"62","hashOfConfig":"40"},{"size":707,"mtime":1613110689408,"results":"63","hashOfConfig":"40"},{"size":3236,"mtime":1613311455081,"results":"64","hashOfConfig":"40"},{"size":1062,"mtime":1613308761552,"results":"65","hashOfConfig":"40"},{"size":5466,"mtime":1613723305536,"results":"66","hashOfConfig":"40"},{"size":5124,"mtime":1613723271314,"results":"67","hashOfConfig":"40"},{"size":51,"mtime":1611311105002,"results":"68","hashOfConfig":"40"},{"size":1107,"mtime":1611329663713,"results":"69","hashOfConfig":"40"},{"size":228,"mtime":1612931032858,"results":"70","hashOfConfig":"40"},{"size":284,"mtime":1610463383038,"results":"71","hashOfConfig":"40"},{"size":319,"mtime":1610210897862,"results":"72","hashOfConfig":"40"},{"size":1301,"mtime":1613110952569,"results":"73","hashOfConfig":"40"},{"size":145,"mtime":1613728797645,"results":"74","hashOfConfig":"40"},{"size":442,"mtime":1613110968878,"results":"75","hashOfConfig":"40"},{"size":1507,"mtime":1613723515658,"results":"76","hashOfConfig":"40"},{"size":334,"mtime":1613723642028,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"r96boc",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"80"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"80"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"80"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"80"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"80"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"80"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"C:\\workSpace1\\react-bbs\\bbs\\src\\index.js",[],["161","162"],"C:\\workSpace1\\react-bbs\\bbs\\src\\App.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\reportWebVitals.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\store\\reducers\\auth.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\store\\reducers\\posts.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\Auth\\Logout\\Logout.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\Auth\\Auth.js",["163"],"import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nimport {ageList, sexList} from '../../common/authConst';\r\nimport {checkValidity} from '../../common/utility';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport * as actions from '../../store/actions/index';\r\n\r\n\r\nimport classes from './Auth.module.css';\r\n\r\nclass Auth extends Component {\r\n\r\n    state ={\r\n        formElement: {\r\n            name: {\r\n                elementType: \"input\",\r\n                elementConfig: {\r\n                    placeholder: \"名前\"\r\n                },\r\n                value: \"\",\r\n                valid: true,\r\n                touched: false,\r\n                label: \"名前\",\r\n                onlySignUp: true,\r\n            },\r\n            email: {\r\n                elementType: \"input\",\r\n                elementConfig: {\r\n                    type: \"email\",\r\n                    placeholder: \"メールアドレス\"\r\n                },\r\n                value: \"\",\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n                label: \"メールアドレス\",\r\n                onlySignUp: false,\r\n            },\r\n            password: {\r\n                elementType: \"input\",\r\n                elementConfig: {\r\n                    type: \"password\",\r\n                    placeholder: \"6文字以上\"\r\n                },\r\n                value: \"\",\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n                label: \"パスワード\",\r\n                onlySignUp: false,\r\n            },\r\n            password2: {\r\n                elementType: \"input\",\r\n                elementConfig: {\r\n                    type: \"password\",\r\n                    placeholder: \"6文字以上\"\r\n                },\r\n                value: \"\",\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n                label: \"パスワード(確認用)\",\r\n                onlySignUp: true,\r\n            },\r\n            sex: {\r\n                elementType: \"select\",\r\n                elementConfig: {\r\n                    options: sexList\r\n                },\r\n                value: sexList[0],\r\n                valid: true,\r\n                touched: true,\r\n                label: \"性別\",\r\n                onlySignUp: true,\r\n            },\r\n            birhday: {\r\n                elementType: \"select\",\r\n                elementConfig: {\r\n                    options: ageList\r\n                },\r\n                value: new Date().getFullYear() - 35,\r\n                validation: {},\r\n                valid: true,\r\n                touched: true,\r\n                label: \"誕生年\",\r\n                onlySignUp: true,\r\n            },\r\n        },\r\n        valid: false,\r\n        isSignUp: false,\r\n    }\r\n\r\n    inputChangeHandler = (event, formName) => {\r\n        const updateObject = {...this.state.formElement, \r\n            [formName]: {\r\n                ...this.state.formElement[formName],\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.formElement[formName].validation),\r\n                touched: true,\r\n            }\r\n        };\r\n        this.setState({formElement: updateObject});\r\n\r\n        // フォームの送信可否を判断する\r\n        for (let key in updateObject) {\r\n            // ログインの場合\r\n            if (!this.state.isSignUp && updateObject[key].onlySignUp) continue;\r\n\r\n            const elem = updateObject[key];\r\n            if (!elem.valid || !elem.touched) {\r\n                this.setState({valid: false});\r\n                return;\r\n            } \r\n        }\r\n        this.setState({valid: true});\r\n    }\r\n\r\n    /**\r\n     * 新規登録またはログインボタン押下\r\n     */\r\n    onSubmitHandler = () => {\r\n\r\n        console.log(\"onsubmithandler is called\");\r\n\r\n        if (this.state.isSignUp && this.state.formElement.password.value != this.state.formElement.password2.value) {\r\n            alert(\"パスワードが一致しません。\");\r\n            return;\r\n        }\r\n\r\n        const userInfo = {\r\n            username: this.state.formElement.name.value,\r\n            email: this.state.formElement.email.value,\r\n            password: this.state.formElement.password.value,\r\n            password2: this.state.formElement.password2.value,\r\n            sex: this.state.formElement.sex.value,\r\n            birthday: this.state.formElement.birhday.value,\r\n        }\r\n\r\n        // ログインor新規登録を行う\r\n        this.props.auth(userInfo, this.state.isSignUp)\r\n    }\r\n\r\n    componentDidMount() {\r\n        // エラー表示をした後は、保持しているエラー情報を削除\r\n        if(this.props.error) {\r\n            this.props.authErrorReset();\r\n        }\r\n    }\r\n\r\n    created = () => {\r\n        this.setState({isSignUp: false});\r\n        this.props.authCreateSuccessEnd();\r\n    }\r\n\r\n    render() {\r\n        // ログイン済みの場合、本画面に遷移\r\n        let authRedirect = null;\r\n        if (this.props.isAuthenticate) {\r\n            authRedirect = <Redirect to={this.props.redirectPath} />\r\n        }\r\n        if (this.props.created) {\r\n            this.created();\r\n        }\r\n\r\n        // エラーがあれば、エラー表示\r\n        let errorMessage = null;\r\n        if(this.props.error) {\r\n            errorMessage = (<p style={{color: \"red\"}}>{this.props.error}</p>);\r\n        }\r\n\r\n        const authArr = [];\r\n        for (let key in this.state.formElement) {\r\n            // 新規登録でのみ使用するインプット要素は削除する\r\n            if (this.state.formElement[key].onlySignUp && !this.state.isSignUp) continue;\r\n            authArr.push({\r\n                id: key,\r\n                config: this.state.formElement[key]\r\n            })\r\n        }\r\n\r\n        let contents = authArr.map(e =>　{\r\n            return(<Input\r\n                key={e.id}\r\n                elementType={e.config.elementType}\r\n                elementConfig={e.config.elementConfig}\r\n                value={e.config.value}\r\n                invalid={e.config.valid}\r\n                shouldValidate={e.config.validation}\r\n                touched={e.config.touched}\r\n                changed={(event) => this.inputChangeHandler(event, e.id)}\r\n                label={e.config.label}/>)}\r\n        );\r\n\r\n        // ロード中であればスピナーを表示\r\n        if (this.props.loading) {\r\n            contents = <Spinner />\r\n        }\r\n\r\n        return(\r\n            <div className={classes.Auth}>\r\n                {errorMessage}\r\n                {authRedirect}\r\n                {contents}\r\n                <Button\r\n                    btnType=\"Success\"\r\n                    disabled={!this.state.valid}\r\n                    clicked={()=>this.onSubmitHandler()} >{this.state.isSignUp ? \"新規登録\" : \"ログイン\"}</Button>\r\n                <Button\r\n                    btnType=\"Danger\"\r\n                    clicked={() => this.setState({isSignUp: !this.state.isSignUp})}\r\n                    >{this.state.isSignUp ? \"ログインへ切替\" : \"新規登録へ切替\"}</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        userInfo: state.auth.userInfo,\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        redirectPath: state.auth.authRedirectPath,\r\n        isAuthenticate: state.auth.token !== null,\r\n        created: state.auth.created,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        auth: (userInfo, isSignUp) => dispatch(actions.auth(userInfo, isSignUp)),\r\n        authErrorReset: () => dispatch(actions.authErrorReset()),\r\n        authCreateSuccessEnd: () => dispatch(actions.authCreateSuccessEnd()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\Posts\\Posts.js",["164"],"C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\NewPost\\NewPost.js",["165"],"C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\PostDetails\\PostDetails.js",["166"],"C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\MyPage\\MyPage.js",["167"],"import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport {getSex} from '../../common/authConst'\r\nimport * as actions from '../../store/actions/index'\r\nimport {getLocalStorage} from '../../common/crypto';\r\n\r\nimport classes from './MyPage.module.css';\r\nimport Modal from '../../components/UI/Modal/Modal';\r\n\r\nclass MyPage extends Component {\r\n    state = {\r\n        form: {\r\n            username: {\r\n                value: getLocalStorage(\"username\"), elementType: \"label\", writable:false, label: \"名前\", changeable:true,\r\n            },\r\n            email: {\r\n                value: getLocalStorage(\"email\"), elementType: \"label\", writable:false, label: \"メールアドレス\", changeable:true,\r\n            },\r\n            sex: {\r\n                value: getSex(getLocalStorage(\"sex\")), elementType: \"label\", writable:false, label: \"性別\", changeable:false,\r\n            },\r\n            birthday: {\r\n                value: getLocalStorage(\"birthday\"), elementType: \"label\", writable:false, label: \"誕生年\", changeable:false,\r\n            }\r\n        },\r\n        modalShow: false,\r\n        password: \"\",\r\n    }\r\n\r\n    profileChangeHandler = (event, id) => {\r\n        const updateFormValue = {\r\n            ...this.state.form,\r\n            [id]: {...this.state.form[id], value: event.target.value}\r\n        }\r\n        this.setState({form: updateFormValue});\r\n    };\r\n\r\n    // 変数をオブジェクトのキーに使用する場合、[]で囲う必要あり\r\n    // 例） id: \"hoge\" => [id]: \"hobe\"\r\n    profileTypeSwitchHandler = (id) => {\r\n        const updateFormValue = {\r\n            ...this.state.form,\r\n            [id]: {...this.state.form[id], writable: !this.state.form[id].writable, elementType: this.state.form[id].elementType==\"label\" ? \"input\" : \"label\"} \r\n        }\r\n        this.setState({form: updateFormValue});\r\n    }\r\n\r\n    profileSubmitHandler = () => {\r\n        this.setState({modalShow: true});\r\n    }\r\n\r\n    modalSubmitHandler = (username, email, password) => {\r\n        this.props.profileUpdate(username, email, password);\r\n        this.setState({modalShow: false});\r\n    }\r\n\r\n    render() {\r\n        const profileArray = [];\r\n        for (let key in this.state.form) {\r\n            profileArray.push({\r\n                id: key,\r\n                content: this.state.form[key]\r\n            });\r\n        };\r\n        const passCofirm = (\r\n                    <div className={classes.PassConfirm}>\r\n                        <Input\r\n                            key={1}\r\n                            value={this.state.password}\r\n                            label=\"パスワード\"\r\n                            elementType=\"input\"\r\n                            elementConfig={{type: \"password\"}}\r\n                            changed={(event) => this.setState({password: event.target.value})}/>\r\n                        <Button btnType=\"Success\" clicked={() => this.modalSubmitHandler(this.state.form.username.value, this.state.form.email.value, this.state.password)}>送信</Button>\r\n                    </div>\r\n        )\r\n\r\n        // list の key は最上位のコンポーネントに設定する事\r\n        let profiles = (\r\n            <div>\r\n                {profileArray.map(profile => (\r\n                    <div key={profile.id} className={classes.InputElement}>\r\n                        <Input\r\n                            id={profile.id}\r\n                            value={profile.content.value}\r\n                            label={profile.content.label}\r\n                            elementType={profile.content.elementType}\r\n                            changed={(event) => this.profileChangeHandler(event, profile.id)}/>\r\n                        {profile.content.changeable\r\n                            ? <Button btnType=\"Success\" clicked={() => this.profileTypeSwitchHandler(profile.id)}>{profile.content.writable ? \"決定\" : \"変更\"}</Button>\r\n                            : null}\r\n                    </div>\r\n                    ))}\r\n            </div>\r\n        );\r\n\r\n        // return は <div>で囲う必要あり\r\n        return (\r\n            <div className={classes.MyPage}>\r\n                <h1 style={{textAlign: \"center\"}}>PROFILE</h1>\r\n                <Modal\r\n                    show={this.state.modalShow}\r\n                    clicked={() => this.setState({modalShow : !this.state.modalShow})}>\r\n                        {passCofirm}\r\n                </Modal>\r\n                {profiles}\r\n                <Button \r\n                    btnType=\"Danger\"\r\n                    clicked={() => this.profileSubmitHandler()}>SUBMIT</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isAuthenticate: getLocalStorage(\"token\") != null || state.auth.token !== null\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        profileUpdate: (username, email, password) => dispatch(actions.profileUpdate(username, email, password))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPage);","C:\\workSpace1\\react-bbs\\bbs\\src\\hoc\\Layout\\Layout.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\store\\actions\\actionTypes.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\store\\actions\\index.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\hoc\\Auxirialy.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\common\\authConst.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\common\\utility.js",["168"],"import * as CommonConst from './commonConst';\r\n\r\nexport const checkValidity = ( value, rules ) => {\r\n    \r\n    let isValid = true;\r\n    if ( !rules ) {\r\n        return true;\r\n    }\r\n\r\n    if ( rules.required ) {\r\n        isValid = value.trim() !== '' && isValid;\r\n    }\r\n\r\n    if ( rules.minLength ) {\r\n        isValid = value.length >= rules.minLength && isValid\r\n    }\r\n\r\n    if ( rules.maxLength ) {\r\n        isValid = value.length <= rules.maxLength && isValid\r\n    }\r\n\r\n    if ( rules.isEmail ) {\r\n        const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n        isValid = pattern.test( value ) && isValid\r\n    }\r\n\r\n    if ( rules.isNumeric ) {\r\n        const pattern = /^\\d+$/;\r\n        isValid = pattern.test( value ) && isValid\r\n    }\r\n\r\n    return isValid;\r\n}\r\n\r\nexport const getDateFromString = (dt, userId, type) => {\r\n    const y = dt.getFullYear();\r\n    const m = (\"00\" + (dt.getMonth()+1)).slice(-2);\r\n    const d = (\"00\" + (dt.getDate())).slice(-2);\r\n    const h = (\"00\" + dt.getHours()).slice(-2);\r\n    const M = (\"00\" + dt.getMinutes()).slice(-2);\r\n    const s = (\"00\" + dt.getSeconds()).slice(-2);\r\n    const ms = dt.getSeconds();\r\n    switch(type) {\r\n        case CommonConst.POST_ID:\r\n            return (\"P\" + userId + y + m + d + h + M + s + ms)\r\n        case CommonConst.RES_ID:\r\n            return (\"R\" + userId + y + m + d + h + M + s + ms)\r\n        default:\r\n            return (\"W\" + userId + y + m + d + h + M + s + ms)\r\n    }\r\n}\r\n\r\nexport const getDateYYYYMMDD = (dt) => {\r\n    const y = dt.getFullYear();\r\n    const m = (\"00\" + (dt.getMonth()+1)).slice(-2);\r\n    const d = (\"00\" + (dt.getDate())).slice(-2);\r\n    return (y + \"/\" + m + \"/\" + d)\r\n}\r\n\r\nexport const getValFromList = (value, valList) => {\r\n    for (let key in valList) {\r\n        if (valList[key].value == value){ \r\n            return valList[key].displayValue\r\n        }\r\n    }\r\n    return null;\r\n}","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\PostDetails\\Chart\\Chart.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\PostDetails\\ResponseDetails\\ResponseDetails.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\PostDetails\\ResponseForm\\ReponseForm.js",["169"],"import React, { useState } from 'react';\r\n\r\nimport {checkValidity} from '../../../common/utility';\r\nimport * as formConst from '../../../common/formConst';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport Button from '../../../components/UI/Button/Button';\r\n\r\n\r\nimport classes from './ResponseForm.module.css';\r\n\r\nconst ResponseForm = props => {\r\n    const [inputElements, setinputElements] = useState({\r\n        //賞味期限切れ後の経過日数\r\n        expiredDays: {\r\n            elementType: 'select', // htmlに表示する際のタグ\r\n            elementConfig: { // タグ内に記載する要素\r\n                boxSizeMiddle: true,\r\n                options: formConst.expiredDateSelectList,\r\n            },\r\n            value: 1, // 表示する初期値\r\n            validation: {\r\n            },\r\n            valid: false, // 検査の結果有効か否か\r\n            touched:false,\r\n            label: \"賞味期限切れ後の経過日数\"}, // タッチ済みかどうか\r\n        taste: {\r\n                elementType: 'starrating', // htmlに表示する際のタグ\r\n                elementConfig: { // タグ内に記載する要素\r\n                    size: 30,\r\n                    isHalf: false\r\n                },\r\n                value: 1, // 表示する初期値\r\n                validation: {},\r\n                valid: false, // 検査の結果有効か否か\r\n                touched:false,\r\n                label: \"味\"}, // タッチ済みかどうか\r\n        appearance: {\r\n                elementType: 'starrating', // htmlに表示する際のタグ\r\n                elementConfig: { // タグ内に記載する要素\r\n                    size: 30,\r\n                    isHalf: false\r\n                },\r\n                value: 1, // 表示する初期値\r\n                validation: {},\r\n                valid: false, // 検査の結果有効か否か\r\n                touched:false,\r\n                label: \"見た目\"}, // タッチ済みかどうか\r\n        condition: {\r\n                elementType: 'starrating', // htmlに表示する際のタグ\r\n                elementConfig: { // タグ内に記載する要素\r\n                    size: 30,\r\n                    isHalf: false\r\n                },\r\n                value: 1, // 表示する初期値\r\n                validation: {},\r\n                valid: false, // 検査の結果有効か否か\r\n                touched:false,\r\n                label: \"食後の体調\"}, // タッチ済みかどうか\r\n        comment: {\r\n            elementType: \"textarea\",\r\n            elementConfig: {\r\n                text: 'text',\r\n                placeholder: \"例) 見た目は悪かったが、食後の体調は良好...\"\r\n            },\r\n            value: '',\r\n            validation: {},\r\n            valid: false,\r\n            touched:false,\r\n            label: \"コメント\"},\r\n    })\r\n    \r\n    const onChangeHandler = (event, inputIdentifier) => {\r\n        // 数字全角を半角に修正\r\n        let newValue = event.target.value;\r\n        if (inputIdentifier == \"expiredDays\") {\r\n            newValue = event.target.value.replace(/[０-９]/g, (input) => String.fromCharCode(input.charCodeAt(0)-0xFEE0))\r\n        }\r\n        const newElement = {...inputElements[inputIdentifier],\r\n            value: newValue,\r\n            valid: checkValidity(newValue, inputElements[inputIdentifier].validation),\r\n            touched: true};\r\n        setinputElements({...inputElements, [inputIdentifier]: newElement});\r\n    };\r\n\r\n    const onSubmitHandler = () => {\r\n        const newRes = {\r\n            expiredDays: inputElements[\"expiredDays\"].value,\r\n            appearance: inputElements[\"appearance\"].value,\r\n            taste: inputElements[\"taste\"].value,\r\n            condition: inputElements[\"condition\"].value,\r\n            comment: inputElements[\"comment\"].value,\r\n        }\r\n        props.submitted(newRes);\r\n\r\n        // フォームを初期化する\r\n        const newIptElm = {}\r\n        for (let key in inputElements) {\r\n            switch(inputElements[key].elementType) {\r\n                case \"starrating\":\r\n                case \"select\":\r\n                    newIptElm[key] = {...inputElements[key], value: 1};\r\n                    break;\r\n                default:\r\n                    newIptElm[key] = {...inputElements[key], value: ''}\r\n            }\r\n        }\r\n        setinputElements(newIptElm);\r\n\r\n        // モーダルを閉じる\r\n        props.modalClosed();\r\n    }\r\n\r\n    // フォーム表示用のオブジェクトを配列に変換\r\n    const iptElmArr = [];\r\n    for (let key in inputElements) {\r\n        iptElmArr.push({\r\n            id: key,\r\n            config: inputElements[key]\r\n        })\r\n    }\r\n\r\n    return (\r\n    <div className={classes.ResponseForm}>\r\n        {iptElmArr.map(e => (\r\n            <Input \r\n                key={e.id} \r\n                elementType={e.config.elementType}\r\n                elementConfig={e.config.elementConfig}\r\n                value={e.config.value}\r\n                invalid={!e.config.valid}\r\n                changed={(event) => onChangeHandler(event, e.id)}\r\n                touched={e.config.touched}\r\n                validation={e.config.validation}\r\n                label={e.config.label}\r\n            />\r\n        ))}\r\n        <Button \r\n            clicked={() => onSubmitHandler()}\r\n            btnType={inputElements[\"expiredDays\"].valid ? \"Success\" : \"Danger\"}\r\n            disabled={!inputElements[\"expiredDays\"].valid}\r\n            >送信</Button>\r\n    </div>)\r\n}\r\n\r\nexport default ResponseForm;","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\UI\\Button\\Button.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\components\\UI\\Modal\\Modal.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\components\\UI\\Spinner\\Spinner.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Navigation\\Toolbar\\Toolbar.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\components\\UI\\Input\\Input.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Navigation\\SideDrawer\\SideDrawer.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\store\\actions\\posts.js",["170"],"import axios from '../../axios-post';\r\nimport * as actionTypes from './actionTypes';\r\nimport {getLocalStorage} from '../../common/crypto';\r\n\r\nexport const addSearchQuery = (query) => {\r\n    return {\r\n        type: actionTypes.ADD_SEARCH_QUERY,\r\n        query: query\r\n    }\r\n}\r\n\r\n\r\nconst addPostSuccess = (post) => {\r\n    return {\r\n        type: actionTypes.ADD_POST_SUCCESS,\r\n        post: post\r\n    }\r\n}\r\n\r\nexport const fetchSuccess = (posts) => {\r\n    return {\r\n        type: actionTypes.FETCH_SUCCESS,\r\n        posts: posts\r\n    }\r\n}\r\n\r\nexport const fetchDetailSuccess = (post, index) => {\r\n    return {\r\n        type: actionTypes.FETCH_DETAILS_SUCCESS,\r\n        post: post,\r\n        index, index,\r\n    }\r\n}\r\n\r\nexport const addNewResponse = (userResponse, postId) => {\r\n    return {\r\n        type: actionTypes.ADD_RESPONSE,\r\n        userResponse: userResponse,\r\n        postId: postId,\r\n    }\r\n}\r\n\r\nexport const addGoodClickSuccess = (goodclickuser, postIndex ,responseIndex) =>{\r\n    return {\r\n        type: actionTypes.ADD_GOOD_CLICK_SUCCESS,\r\n        postIndex: postIndex,\r\n        responseIndex: responseIndex,\r\n        goodclickuser: goodclickuser,\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * イイネボタンを追加する\r\n * @param {}} response \r\n * @param {*} postIndex \r\n * @param {*} responseIndex \r\n */\r\nexport const addGoodClick = (response, postIndex, responseIndex) => {\r\n    const userId = getLocalStorage(\"userId\");\r\n\r\n    return dispatch => {\r\n        axios.post(\"/goodclickuser/\",{\r\n            response: response,\r\n            user: userId\r\n        },  {\r\n            headers: {\r\n                'Authorization': `Token ${getLocalStorage(\"token\")}`,\r\n            }\r\n        })\r\n        .then(res => {\r\n            dispatch(addGoodClickSuccess(res.data, postIndex, responseIndex));\r\n        })\r\n        .catch(err => {\r\n\r\n        })\r\n\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * ポストを追加する\r\n * @param {}} query \r\n */\r\nexport const addPost = (post) => {\r\n    // 現状、ファイルのアップロードにはフォームデータとするのが必要のよう\r\n    const form = new FormData();\r\n    form.append(\"food_image\", post.image[0]);\r\n    form.append(\"describe\", post.describe);\r\n    form.append(\"title\", post.title);\r\n    console.log(form);\r\n\r\n    return dispatch => {\r\n        axios.post(\"/posts/\", form ,{headers: {\r\n            'content-type': 'multipart/form-data',\r\n        }})\r\n        .then(res => {\r\n            console.log(res.data);\r\n            dispatch(addPostSuccess(res.data));\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        })\r\n    }\r\n}\r\n\r\n/**\r\n * ポストを取得する\r\n */\r\nexport const fetchPost = (query) => {\r\n    \r\n    let url = \"/posts/\";\r\n    if(query) {\r\n        url = \"/posts/?query=\"+query;\r\n    }\r\n    return dispath => {\r\n        axios.get(url)\r\n        .then(res => {\r\n                dispath(fetchSuccess(res.data));\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n    }\r\n}\r\n\r\n/**\r\n * 個別のポストを取得する\r\n * @param {}} postid \r\n */\r\nexport const fetchPostDetails =(postid, index) => {\r\n\r\n    return dispatch => {\r\n        callAxiosFetchPostDetails(dispatch, postid, index);\r\n    }\r\n}\r\n\r\n/**\r\n * 個別のポストを取得する\r\n * @param {}} postid \r\n */\r\nconst callAxiosFetchPostDetails = (dispatch, postid, index) => {\r\n    const url = \"/posts/\" + postid + \"/\";\r\n    axios.get(url)\r\n        .then(res => {\r\n            console.log(res.data);\r\n            dispatch(fetchDetailSuccess(res.data, index));\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        })\r\n}\r\n\r\n/**\r\n * ポストに対するレスポンスを追加する\r\n */\r\nexport const addResponse = (responseInfo, postid, postIndex) => {\r\n    const postContents = {\r\n        sex: getLocalStorage(\"sex\"),\r\n        age: (new Date().getFullYear() - getLocalStorage(\"birthday\")),\r\n        userid: getLocalStorage(\"userId\"),\r\n        post: postid,\r\n        appearance: responseInfo.appearance,\r\n        taste: responseInfo.taste,\r\n        condition: responseInfo.condition,\r\n        expire_date: responseInfo.expiredDays,\r\n        expire_type: 1,\r\n        comment: responseInfo.comment,};\r\n\r\n    console.log(postContents);\r\n\r\n    return dispatch => {\r\n        axios.post(\"/response/\", postContents,  {\r\n            headers: {\r\n                'Authorization': `Token ${getLocalStorage(\"token\")}`,\r\n            }\r\n        })\r\n        .then(res => {\r\n            callAxiosFetchGraphData(dispatch, postid);\r\n            callAxiosFetchPostDetails(dispatch, postid, postIndex);\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n}\r\n\r\n/**\r\n * ポストに対するレスポンスのサマリを取得する\r\n * {\r\n *  x: \"日数\", y: \"評価の平均\", x: \"評価数\"\r\n * }\r\n */\r\nexport const fetchGraphData = (postid) => {\r\n    \r\n    return dispatch => {\r\n        callAxiosFetchGraphData(dispatch, postid);\r\n    }\r\n}\r\n\r\n/**\r\n * axios でデータを取得する\r\n * @param {*} dispatch \r\n * @param {*} postid \r\n */\r\nconst callAxiosFetchGraphData = (dispatch, postid) => {\r\n    \r\n    axios.get(\"/posts/\" + postid + \"/graph_data/\")\r\n    .then(res => {\r\n            dispatch(fetchGraphDataSuccess(res.data));\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n        })\r\n}\r\n\r\n\r\nexport const fetchGraphDataSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.FETCH_GRAPH_DATA_SUCCESS,\r\n        graphData: data,\r\n    }\r\n}\r\n","C:\\workSpace1\\react-bbs\\bbs\\src\\store\\actions\\auth.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\common\\commonConst.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\common\\formConst.js",["171"],"export const expiredDateSelectList = [\r\n    {value: 1, displayValue: \"1日\"},\r\n    {value: 2, displayValue: \"2日\"},\r\n    {value: 3, displayValue: \"3日\"},\r\n    {value: 5, displayValue: \"4,5日\"},\r\n    {value: 11, displayValue: \"1~2週間\"},\r\n    {value: 12, displayValue: \"2~3週間\"},\r\n    {value: 13, displayValue: \"3~4週間\"},\r\n    {value: 21, displayValue: \"1~3ヶ月\"},\r\n    {value: 23, displayValue: \"3~6ヶ月\"},\r\n    {value: 26, displayValue: \"6~9ヶ月\"},\r\n    {value: 29, displayValue: \"9~12ヶ月\"},\r\n    {value: 31, displayValue: \"1~2年\"},\r\n    {value: 32, displayValue: \"2~3年\"},\r\n    {value: 33, displayValue: \"3~5年\"},\r\n    {value: 35, displayValue: \"5~10年\"},\r\n    {value: 39, displayValue: \"10年~\"},\r\n];\r\n\r\n/**\r\n * 期限切れ後期間リストから値に相当する表示用値を取得する\r\n * @param {*} value \r\n */\r\nexport const getExpiredDateFromSelectVal = (value) => {\r\n    for(let key in expiredDateSelectList) {\r\n        if(expiredDateSelectList[key].value == value) {\r\n            return expiredDateSelectList[key].displayValue;\r\n        }\r\n    }\r\n    return null;\r\n }","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\UI\\Modal\\BackDrop\\BackDrop.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Navigation\\DrawToggle\\DrawToggle.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Logo\\Logo.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Navigation\\NavigationItems\\NavigationItems.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\axios-post.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Navigation\\NavigationItems\\NavigationItem\\NavigationItem.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\common\\cryptoConst.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\common\\crypto.js",[],{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","severity":1,"message":"177","line":138,"column":74,"nodeType":"178","messageId":"179","endLine":138,"endColumn":76},{"ruleId":"180","severity":1,"message":"181","line":14,"column":7,"nodeType":"182","endLine":14,"endColumn":20,"suggestions":"183"},{"ruleId":"176","severity":1,"message":"184","line":55,"column":24,"nodeType":"178","messageId":"179","endLine":55,"endColumn":26},{"ruleId":"176","severity":1,"message":"184","line":56,"column":56,"nodeType":"178","messageId":"179","endLine":56,"endColumn":58},{"ruleId":"176","severity":1,"message":"184","line":46,"column":129,"nodeType":"178","messageId":"179","endLine":46,"endColumn":131},{"ruleId":"176","severity":1,"message":"184","line":62,"column":32,"nodeType":"178","messageId":"179","endLine":62,"endColumn":34},{"ruleId":"176","severity":1,"message":"184","line":75,"column":29,"nodeType":"178","messageId":"179","endLine":75,"endColumn":31},{"ruleId":"185","severity":1,"message":"186","line":31,"column":16,"nodeType":"187","messageId":"179","endLine":31,"endColumn":21},{"ruleId":"176","severity":1,"message":"184","line":26,"column":45,"nodeType":"178","messageId":"179","endLine":26,"endColumn":47},"no-native-reassign",["188"],"no-negated-in-lhs",["189"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["190"],"Expected '===' and instead saw '=='.","no-dupe-keys","Duplicate key 'index'.","ObjectExpression","no-global-assign","no-unsafe-negation",{"desc":"191","fix":"192"},"Update the dependencies array to be: [props, props.query]",{"range":"193","text":"194"},[332,345],"[props, props.query]"]