[{"C:\\workSpace1\\react-bbs\\bbs\\src\\index.js":"1","C:\\workSpace1\\react-bbs\\bbs\\src\\reportWebVitals.js":"2","C:\\workSpace1\\react-bbs\\bbs\\src\\App.js":"3","C:\\workSpace1\\react-bbs\\bbs\\src\\store\\reducers\\auth.js":"4","C:\\workSpace1\\react-bbs\\bbs\\src\\store\\reducers\\posts.js":"5","C:\\workSpace1\\react-bbs\\bbs\\src\\store\\actions\\actionTypes.js":"6","C:\\workSpace1\\react-bbs\\bbs\\src\\hoc\\Layout\\Layout.js":"7","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\MyPage\\MyPage.js":"8","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\NewPost\\NewPost.js":"9","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\Posts\\Posts.js":"10","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\Auth\\Logout\\Logout.js":"11","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\Auth\\Auth.js":"12","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\PostDetails\\PostDetails.js":"13","C:\\workSpace1\\react-bbs\\bbs\\src\\hoc\\Auxirialy.js":"14","C:\\workSpace1\\react-bbs\\bbs\\src\\store\\actions\\index.js":"15","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\UI\\Button\\Button.js":"16","C:\\workSpace1\\react-bbs\\bbs\\src\\common\\authConst.js":"17","C:\\workSpace1\\react-bbs\\bbs\\src\\common\\utility.js":"18","C:\\workSpace1\\react-bbs\\bbs\\src\\common\\crypto.js":"19","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\PostDetails\\ResponseDetails\\ResponseDetails.js":"20","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\PostDetails\\ResponseForm\\ReponseForm.js":"21","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\PostDetails\\Chart\\Chart.js":"22","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Navigation\\Toolbar\\Toolbar.js":"23","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\UI\\Input\\Input.js":"24","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Navigation\\SideDrawer\\SideDrawer.js":"25","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\UI\\Modal\\Modal.js":"26","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\UI\\Spinner\\Spinner.js":"27","C:\\workSpace1\\react-bbs\\bbs\\src\\common\\commonConst.js":"28","C:\\workSpace1\\react-bbs\\bbs\\src\\common\\formConst.js":"29","C:\\workSpace1\\react-bbs\\bbs\\src\\store\\actions\\posts.js":"30","C:\\workSpace1\\react-bbs\\bbs\\src\\store\\actions\\auth.js":"31","C:\\workSpace1\\react-bbs\\bbs\\src\\common\\cryptoConst.js":"32","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Navigation\\DrawToggle\\DrawToggle.js":"33","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Logo\\Logo.js":"34","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\UI\\Modal\\BackDrop\\BackDrop.js":"35","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Navigation\\NavigationItems\\NavigationItems.js":"36","C:\\workSpace1\\react-bbs\\bbs\\src\\axios-post.js":"37","C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Navigation\\NavigationItems\\NavigationItem\\NavigationItem.js":"38"},{"size":1005,"mtime":1611414905983,"results":"39","hashOfConfig":"40"},{"size":362,"mtime":499162500000,"results":"41","hashOfConfig":"40"},{"size":943,"mtime":1614008852392,"results":"42","hashOfConfig":"40"},{"size":2727,"mtime":1617453410519,"results":"43","hashOfConfig":"40"},{"size":3148,"mtime":1617453410521,"results":"44","hashOfConfig":"40"},{"size":876,"mtime":1617453410515,"results":"45","hashOfConfig":"40"},{"size":1838,"mtime":1617453410513,"results":"46","hashOfConfig":"40"},{"size":5043,"mtime":1617453410496,"results":"47","hashOfConfig":"40"},{"size":4305,"mtime":1618741969637,"results":"48","hashOfConfig":"40"},{"size":1849,"mtime":1617453410510,"results":"49","hashOfConfig":"40"},{"size":516,"mtime":1617453410496,"results":"50","hashOfConfig":"40"},{"size":8099,"mtime":1617453410494,"results":"51","hashOfConfig":"40"},{"size":6379,"mtime":1617453410504,"results":"52","hashOfConfig":"40"},{"size":57,"mtime":1617453410511,"results":"53","hashOfConfig":"40"},{"size":518,"mtime":1617453410516,"results":"54","hashOfConfig":"40"},{"size":299,"mtime":1617453410486,"results":"55","hashOfConfig":"40"},{"size":1264,"mtime":1617453410472,"results":"56","hashOfConfig":"40"},{"size":1931,"mtime":1617453410474,"results":"57","hashOfConfig":"40"},{"size":325,"mtime":1617453410473,"results":"58","hashOfConfig":"40"},{"size":3775,"mtime":1617453410506,"results":"59","hashOfConfig":"40"},{"size":5461,"mtime":1617453410508,"results":"60","hashOfConfig":"40"},{"size":2063,"mtime":1617453410502,"results":"61","hashOfConfig":"40"},{"size":685,"mtime":1617453410484,"results":"62","hashOfConfig":"40"},{"size":3143,"mtime":1617453410487,"results":"63","hashOfConfig":"40"},{"size":1032,"mtime":1617453410482,"results":"64","hashOfConfig":"40"},{"size":623,"mtime":1617453410490,"results":"65","hashOfConfig":"40"},{"size":170,"mtime":1612280871848,"results":"66","hashOfConfig":"40"},{"size":50,"mtime":1617453410472,"results":"67","hashOfConfig":"40"},{"size":1077,"mtime":1617453410473,"results":"68","hashOfConfig":"40"},{"size":5119,"mtime":1618741247504,"results":"69","hashOfConfig":"40"},{"size":4946,"mtime":1617453410516,"results":"70","hashOfConfig":"40"},{"size":1507,"mtime":1613723515658,"results":"71","hashOfConfig":"40"},{"size":272,"mtime":1617453410478,"results":"72","hashOfConfig":"40"},{"size":308,"mtime":1617453410476,"results":"73","hashOfConfig":"40"},{"size":220,"mtime":1617453410489,"results":"74","hashOfConfig":"40"},{"size":1269,"mtime":1617453410480,"results":"75","hashOfConfig":"40"},{"size":139,"mtime":1617453410470,"results":"76","hashOfConfig":"40"},{"size":427,"mtime":1617453410479,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"r96boc",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"80"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"80"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"80"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"80"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"80"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"80"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"80"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"C:\\workSpace1\\react-bbs\\bbs\\src\\index.js",[],["162","163"],"C:\\workSpace1\\react-bbs\\bbs\\src\\reportWebVitals.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\App.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\store\\reducers\\auth.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\store\\reducers\\posts.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\store\\actions\\actionTypes.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\hoc\\Layout\\Layout.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\MyPage\\MyPage.js",["164"],"import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport Button from '../../components/UI/Button/Button';\nimport Input from '../../components/UI/Input/Input';\nimport {getSex} from '../../common/authConst'\nimport * as actions from '../../store/actions/index'\nimport {getLocalStorage} from '../../common/crypto';\n\nimport classes from './MyPage.module.css';\nimport Modal from '../../components/UI/Modal/Modal';\n\nclass MyPage extends Component {\n    state = {\n        form: {\n            username: {\n                value: getLocalStorage(\"username\"), elementType: \"label\", writable:false, label: \"名前\", changeable:true,\n            },\n            email: {\n                value: getLocalStorage(\"email\"), elementType: \"label\", writable:false, label: \"メールアドレス\", changeable:true,\n            },\n            sex: {\n                value: getSex(getLocalStorage(\"sex\")), elementType: \"label\", writable:false, label: \"性別\", changeable:false,\n            },\n            birthday: {\n                value: getLocalStorage(\"birthday\"), elementType: \"label\", writable:false, label: \"誕生年\", changeable:false,\n            }\n        },\n        modalShow: false,\n        password: \"\",\n    }\n\n    profileChangeHandler = (event, id) => {\n        const updateFormValue = {\n            ...this.state.form,\n            [id]: {...this.state.form[id], value: event.target.value}\n        }\n        this.setState({form: updateFormValue});\n    };\n\n    // 変数をオブジェクトのキーに使用する場合、[]で囲う必要あり\n    // 例） id: \"hoge\" => [id]: \"hobe\"\n    profileTypeSwitchHandler = (id) => {\n        const updateFormValue = {\n            ...this.state.form,\n            [id]: {...this.state.form[id], writable: !this.state.form[id].writable, elementType: this.state.form[id].elementType==\"label\" ? \"input\" : \"label\"} \n        }\n        this.setState({form: updateFormValue});\n    }\n\n    profileSubmitHandler = () => {\n        this.setState({modalShow: true});\n    }\n\n    modalSubmitHandler = (username, email, password) => {\n        this.props.profileUpdate(username, email, password);\n        this.setState({modalShow: false});\n    }\n\n    render() {\n        const profileArray = [];\n        for (let key in this.state.form) {\n            profileArray.push({\n                id: key,\n                content: this.state.form[key]\n            });\n        };\n        const passCofirm = (\n                    <div className={classes.PassConfirm}>\n                        <Input\n                            key={1}\n                            value={this.state.password}\n                            label=\"パスワード\"\n                            elementType=\"input\"\n                            elementConfig={{type: \"password\"}}\n                            changed={(event) => this.setState({password: event.target.value})}/>\n                        <Button btnType=\"Success\" clicked={() => this.modalSubmitHandler(this.state.form.username.value, this.state.form.email.value, this.state.password)}>送信</Button>\n                    </div>\n        )\n\n        // list の key は最上位のコンポーネントに設定する事\n        let profiles = (\n            <div>\n                {profileArray.map(profile => (\n                    <div key={profile.id} className={classes.InputElement}>\n                        <Input\n                            id={profile.id}\n                            value={profile.content.value}\n                            label={profile.content.label}\n                            elementType={profile.content.elementType}\n                            changed={(event) => this.profileChangeHandler(event, profile.id)}/>\n                        {profile.content.changeable\n                            ? <Button btnType=\"Success\" clicked={() => this.profileTypeSwitchHandler(profile.id)}>{profile.content.writable ? \"決定\" : \"変更\"}</Button>\n                            : null}\n                    </div>\n                    ))}\n            </div>\n        );\n\n        // return は <div>で囲う必要あり\n        return (\n            <div className={classes.MyPage}>\n                <h1 style={{textAlign: \"center\"}}>PROFILE</h1>\n                <Modal\n                    show={this.state.modalShow}\n                    clicked={() => this.setState({modalShow : !this.state.modalShow})}>\n                        {passCofirm}\n                </Modal>\n                {profiles}\n                <Button \n                    btnType=\"Danger\"\n                    clicked={() => this.profileSubmitHandler()}>SUBMIT</Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthenticate: getLocalStorage(\"token\") != null || state.auth.token !== null\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        profileUpdate: (username, email, password) => dispatch(actions.profileUpdate(username, email, password))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPage);","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\NewPost\\NewPost.js",["165"],"C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\Posts\\Posts.js",["166"],"import React, { useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport {NavLink} from 'react-router-dom'\n\nimport * as actions from '../../store/actions/index'\n\nimport classes from './Post.module.css';\n\nconst Posts = props => {\n\n    useEffect(() => {\n        props.fetchPost(props.query);\n          \n    },[props.query])\n    \n    const posts = props.posts.map((e, index) => {\n        return(\n        <NavLink className={classes.Contents} key={e.id} to={{\n            pathname:\"/posts/\" + e.id,\n            extraProps: {\n                index: index\n            }\n            }}>\n            <i className=\"fas fa-drumstick-bite fa-2x\"></i>\n            <h3>{e.title}  ({typeof e.response == \"undefined\" ? 0 : e.response.length})</h3>\n        </NavLink>)\n    })\n \n    return (\n        <div className={classes.Posts}>\n            <div className={classes.PostsNotice}>\n                <h2>※ 注意 ※</h2>\n                <h5>・当ウェブサイトは賞味期限切れ／消費期限切れの食べ物を食べた後の健康状態に何らの責任を追うものではありません<br/>\n                    ・また、当ウェブサイト、またはコンテンツのご利用により、万一、\n                ご利用者様に何らかの不都合や損害が発生したとしても、\n                当ウェブサイトは何らの責任を負うものではありません。</h5>            \n            </div>\n            {posts}\n        </div>\n    );\n}\nconst mapStateToProps = state => {\n    return {\n        posts: state.posts.posts,\n        response: state.posts.response,\n        query: state.posts.query,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchPost: (query) => dispatch(actions.fetchPost(query))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts);","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\Auth\\Logout\\Logout.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\Auth\\Auth.js",["167"],"import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Redirect} from 'react-router-dom';\n\nimport {ageList, sexList} from '../../common/authConst';\nimport {checkValidity} from '../../common/utility';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport * as actions from '../../store/actions/index';\n\n\nimport classes from './Auth.module.css';\n\nclass Auth extends Component {\n\n    state ={\n        formElement: {\n            name: {\n                elementType: \"input\",\n                elementConfig: {\n                    placeholder: \"名前\"\n                },\n                value: \"\",\n                valid: true,\n                touched: false,\n                label: \"名前\",\n                onlySignUp: true,\n            },\n            email: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"email\",\n                    placeholder: \"メールアドレス\"\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false,\n                label: \"メールアドレス\",\n                onlySignUp: false,\n            },\n            password: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"password\",\n                    placeholder: \"6文字以上\"\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false,\n                label: \"パスワード\",\n                onlySignUp: false,\n            },\n            password2: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"password\",\n                    placeholder: \"6文字以上\"\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false,\n                label: \"パスワード(確認用)\",\n                onlySignUp: true,\n            },\n            sex: {\n                elementType: \"select\",\n                elementConfig: {\n                    options: sexList\n                },\n                value: sexList[0],\n                valid: true,\n                touched: true,\n                label: \"性別\",\n                onlySignUp: true,\n            },\n            birhday: {\n                elementType: \"select\",\n                elementConfig: {\n                    options: ageList\n                },\n                value: new Date().getFullYear() - 35,\n                validation: {},\n                valid: true,\n                touched: true,\n                label: \"誕生年\",\n                onlySignUp: true,\n            },\n        },\n        valid: false,\n        isSignUp: false,\n    }\n\n    inputChangeHandler = (event, formName) => {\n        const updateObject = {...this.state.formElement, \n            [formName]: {\n                ...this.state.formElement[formName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value, this.state.formElement[formName].validation),\n                touched: true,\n            }\n        };\n        this.setState({formElement: updateObject});\n\n        // フォームの送信可否を判断する\n        for (let key in updateObject) {\n            // ログインの場合\n            if (!this.state.isSignUp && updateObject[key].onlySignUp) continue;\n\n            const elem = updateObject[key];\n            if (!elem.valid || !elem.touched) {\n                this.setState({valid: false});\n                return;\n            } \n        }\n        this.setState({valid: true});\n    }\n\n    /**\n     * 新規登録またはログインボタン押下\n     */\n    onSubmitHandler = () => {\n\n        console.log(\"onsubmithandler is called\");\n\n        if (this.state.isSignUp && this.state.formElement.password.value != this.state.formElement.password2.value) {\n            alert(\"パスワードが一致しません。\");\n            return;\n        }\n\n        const userInfo = {\n            username: this.state.formElement.name.value,\n            email: this.state.formElement.email.value,\n            password: this.state.formElement.password.value,\n            password2: this.state.formElement.password2.value,\n            sex: this.state.formElement.sex.value,\n            birthday: this.state.formElement.birhday.value,\n        }\n\n        // ログインor新規登録を行う\n        this.props.auth(userInfo, this.state.isSignUp)\n    }\n\n    componentDidMount() {\n        // エラー表示をした後は、保持しているエラー情報を削除\n        if(this.props.error) {\n            this.props.authErrorReset();\n        }\n    }\n\n    created = () => {\n        this.setState({isSignUp: false});\n        this.props.authCreateSuccessEnd();\n    }\n\n    render() {\n        // ログイン済みの場合、本画面に遷移\n        let authRedirect = null;\n        if (this.props.isAuthenticate) {\n            authRedirect = <Redirect to={this.props.redirectPath} />\n        }\n        if (this.props.created) {\n            this.created();\n        }\n\n        // エラーがあれば、エラー表示\n        let errorMessage = null;\n        if(this.props.error) {\n            errorMessage = (<p style={{color: \"red\"}}>{this.props.error}</p>);\n        }\n\n        const authArr = [];\n        for (let key in this.state.formElement) {\n            // 新規登録でのみ使用するインプット要素は削除する\n            if (this.state.formElement[key].onlySignUp && !this.state.isSignUp) continue;\n            authArr.push({\n                id: key,\n                config: this.state.formElement[key]\n            })\n        }\n\n        let contents = authArr.map(e =>　{\n            return(<Input\n                key={e.id}\n                elementType={e.config.elementType}\n                elementConfig={e.config.elementConfig}\n                value={e.config.value}\n                invalid={e.config.valid}\n                shouldValidate={e.config.validation}\n                touched={e.config.touched}\n                changed={(event) => this.inputChangeHandler(event, e.id)}\n                label={e.config.label}/>)}\n        );\n\n        // ロード中であればスピナーを表示\n        if (this.props.loading) {\n            contents = <Spinner />\n        }\n\n        return(\n            <div className={classes.Auth}>\n                {errorMessage}\n                {authRedirect}\n                {contents}\n                <Button\n                    btnType=\"Success\"\n                    disabled={!this.state.valid}\n                    clicked={()=>this.onSubmitHandler()} >{this.state.isSignUp ? \"新規登録\" : \"ログイン\"}</Button>\n                <Button\n                    btnType=\"Danger\"\n                    clicked={() => this.setState({isSignUp: !this.state.isSignUp})}\n                    >{this.state.isSignUp ? \"ログインへ切替\" : \"新規登録へ切替\"}</Button>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = state => {\n    return {\n        userInfo: state.auth.userInfo,\n        loading: state.auth.loading,\n        error: state.auth.error,\n        redirectPath: state.auth.authRedirectPath,\n        isAuthenticate: state.auth.token !== null,\n        created: state.auth.created,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        auth: (userInfo, isSignUp) => dispatch(actions.auth(userInfo, isSignUp)),\n        authErrorReset: () => dispatch(actions.authErrorReset()),\n        authCreateSuccessEnd: () => dispatch(actions.authCreateSuccessEnd()),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\PostDetails\\PostDetails.js",["168"],"import React, {Component} from 'react';\nimport {connect} from 'react-redux'\nimport {Redirect} from 'react-router-dom';\n\nimport Modal from '../../components/UI/Modal/Modal';\nimport ResponseForm from './ResponseForm/ReponseForm';\nimport ResponseDetails from './ResponseDetails/ResponseDetails';\nimport LineChart from './Chart/Chart';\nimport * as actions from '../../store/actions/index';\n\nimport classes from './PostDetails.module.css';\n\nconst ImageComponent = (props) => (\n    <img src={props.img}\n        alt={\"img\"}\n        style={{\n            height: \"52px\",\n            width: \"80px\",\n            borderRadius: \"10px\",\n            margin: \"3px 0\",\n        }}/>);\n\nclass PostDetails extends Component {\n\n    state = {\n        show: false,\n        postId: this.props.match.params.postId,\n    }\n\n    componentDidMount() {\n\n        // グラフデータを取得する\n        const post = this.props.match.params.postId;\n        if (typeof post == \"undefined\") {\n            this.props.fetchPost();\n        }else {\n            this.props.fetchGraphData(post);\n\n        }\n    }\n    \n    componentDidUpdate(prevProps, prevState) {\n        \n        // 平均値を算出する ⇒ reduxで管理するようになったら不要\n    }\n    \n    // ポストに対する反応を投稿\n    onAddResHandler = (responseInfo, post) => {\n        this.props.onAddNewRes(responseInfo, post.id, this.props.location.extraProps.index);\n    }\n\n    render() {\n\n        // GETで取得したポストIDに紐づく投稿を取得する\n        const postid = this.props.match.params.postId;\n        const post = this.props.posts.filter(e => e.id == postid)[0];\n\n        // redux で取得したレスポンスを元にレスポンスコンポーネントを作成する\n        let res = null;\n        let postRedirect = null;\n        let foodImage = null;\n        let foodDescribe = null;\n        if (typeof post !== 'undefined') {\n            res = post.response.map((currentRes, index) => {\n                return (<ResponseDetails\n                            key={index}\n                            responseIndex={index}\n                            userResponse={currentRes}\n                            onClickGood={(response, responseIndex) => this.props.onAddGodClk(response, this.props.location.extraProps.index, responseIndex)}/>)\n            });\n            foodImage = post.food_image ? <ImageComponent img={process.env.REACT_APP_END_POINT+post.food_image}/> : null;\n            foodDescribe = post.describe ? <h5>※ {post.describe}</h5> : null;\n        }else {\n            postRedirect = <Redirect to=\"/\" />\n        }\n\n        /**\n         * レスポンスボタンを付ける\n         * レスポンスフォームのモーダルを作成する\n         */\n\n        return (\n            \n            <div className={classes.PostDetailsCommon}>\n                {postRedirect}\n                <div className={classes.Header}>\n\n                    <Modal show={this.state.show} clicked={() => this.setState({show: !this.state.show})}>\n                        <ResponseForm \n                            postId={this.state.postId}\n                            submitted={(responseInfo) => this.onAddResHandler(responseInfo, post)}\n                            modalClosed={() => this.setState({show: !this.state.show})}/>\n                    </Modal>\n                    <div className={classes.PostDetails}>\n                        <div className={classes.PostDetailsHeader}>\n                            <div className={classes.PostDetailsTitle}>\n                                <i className=\"fas fa-drumstick-bite fa-3x\"></i>\n                                <h1>{post ? post.title : null}</h1>\n                                {foodDescribe}\n                            </div>\n                            {foodImage}\n                        </div>\n                        <div className={classes.PostDetailsDescribe}>\n                           <div className={classes.PostDetailsSummary}>\n                                <div><h4>■評価</h4></div>\n                                <div className={classes.PostDetailsSummaryPraph}>\n                                    <LineChart data={this.props.graphData}></LineChart>\n                                    {/* <h3>見た目：{this.state.average.appearance}</h3>\n                                    <h3>味：{this.state.average.taste}</h3>\n                                <h3>体調：{this.state.average.condition}</h3> */}\n                                </div>\n                                <div><h5>評価：5 問題なし　←－－－→　1 最悪 ※ 0:データなし</h5></div>\n                           </div>\n                        </div>\n                    </div>\n                    <div className={classes.PostHeader}>\n                        <i className=\"fas fa-users fa-3x\"></i>\n                        <h1 style={{margin: \"0 0 0 10px\"}}>みんなの投稿</h1>\n                        {this.props.isAuthenticate ?\n                            <div className={classes.NewPost} onClick={() => this.setState({show: !this.state.show})}>\n                                    <div className={classes.PlusIcon}><span /></div>\n                                    <h2 className={classes.PostLabel}>新規投稿</h2>\n                            </div> : <h5 style={{margin: \"0 10px 0\"}}>※ ログイン後に投稿お願いします ※</h5>}\n                    </div>\n                </div>\n                <div className={classes.Response}>\n                    {res}\n                </div>\n            </div>\n        );\n\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        posts: state.posts.posts,\n        userInfo: state.auth.userInfo,\n        isAuthenticate: localStorage.getItem(\"token\") != null || state.auth.token !== null,\n        graphData: state.posts.graphData,\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onAddNewRes: (responseInfo, postId, postIndex) => dispatch(actions.addResponse(responseInfo, postId, postIndex)),\n        onAddGodClk: (response, postIndex ,responseIndex) => dispatch(actions.addGoodClick(response, postIndex, responseIndex)),\n        fetchPost: () => dispatch(actions.fetchPost()),\n        fetchGraphData: (postId) => dispatch(actions.fetchGraphData(postId)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostDetails);","C:\\workSpace1\\react-bbs\\bbs\\src\\hoc\\Auxirialy.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\store\\actions\\index.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\components\\UI\\Button\\Button.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\common\\authConst.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\common\\utility.js",["169"],"import * as CommonConst from './commonConst';\n\nexport const checkValidity = ( value, rules ) => {\n    \n    let isValid = true;\n    if ( !rules ) {\n        return true;\n    }\n\n    if ( rules.required ) {\n        isValid = value.trim() !== '' && isValid;\n    }\n\n    if ( rules.minLength ) {\n        isValid = value.length >= rules.minLength && isValid\n    }\n\n    if ( rules.maxLength ) {\n        isValid = value.length <= rules.maxLength && isValid\n    }\n\n    if ( rules.isEmail ) {\n        const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n        isValid = pattern.test( value ) && isValid\n    }\n\n    if ( rules.isNumeric ) {\n        const pattern = /^\\d+$/;\n        isValid = pattern.test( value ) && isValid\n    }\n\n    return isValid;\n}\n\nexport const getDateFromString = (dt, userId, type) => {\n    const y = dt.getFullYear();\n    const m = (\"00\" + (dt.getMonth()+1)).slice(-2);\n    const d = (\"00\" + (dt.getDate())).slice(-2);\n    const h = (\"00\" + dt.getHours()).slice(-2);\n    const M = (\"00\" + dt.getMinutes()).slice(-2);\n    const s = (\"00\" + dt.getSeconds()).slice(-2);\n    const ms = dt.getSeconds();\n    switch(type) {\n        case CommonConst.POST_ID:\n            return (\"P\" + userId + y + m + d + h + M + s + ms)\n        case CommonConst.RES_ID:\n            return (\"R\" + userId + y + m + d + h + M + s + ms)\n        default:\n            return (\"W\" + userId + y + m + d + h + M + s + ms)\n    }\n}\n\nexport const getDateYYYYMMDD = (dt) => {\n    const y = dt.getFullYear();\n    const m = (\"00\" + (dt.getMonth()+1)).slice(-2);\n    const d = (\"00\" + (dt.getDate())).slice(-2);\n    return (y + \"/\" + m + \"/\" + d)\n}\n\nexport const getValFromList = (value, valList) => {\n    for (let key in valList) {\n        if (valList[key].value == value){ \n            return valList[key].displayValue\n        }\n    }\n    return null;\n}","C:\\workSpace1\\react-bbs\\bbs\\src\\common\\crypto.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\PostDetails\\ResponseDetails\\ResponseDetails.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\PostDetails\\ResponseForm\\ReponseForm.js",["170"],"import React, { useState } from 'react';\n\nimport {checkValidity} from '../../../common/utility';\nimport * as formConst from '../../../common/formConst';\nimport Input from '../../../components/UI/Input/Input';\nimport Button from '../../../components/UI/Button/Button';\n\n\nimport classes from './ResponseForm.module.css';\n\nconst ResponseForm = props => {\n    const [inputElements, setinputElements] = useState({\n        //賞味期限切れ後の経過日数\n        expiredDays: {\n            elementType: 'select', // htmlに表示する際のタグ\n            elementConfig: { // タグ内に記載する要素\n                boxSizeMiddle: true,\n                options: formConst.expiredDateSelectList,\n            },\n            value: 1, // 表示する初期値\n            validation: {\n            },\n            valid: false, // 検査の結果有効か否か\n            touched:false,\n            label: \"賞味期限切れ後の経過日数\"}, // タッチ済みかどうか\n        taste: {\n                elementType: 'starrating', // htmlに表示する際のタグ\n                elementConfig: { // タグ内に記載する要素\n                    size: 30,\n                    isHalf: false\n                },\n                value: 1, // 表示する初期値\n                validation: {},\n                valid: false, // 検査の結果有効か否か\n                touched:false,\n                label: \"味\"}, // タッチ済みかどうか\n        appearance: {\n                elementType: 'starrating', // htmlに表示する際のタグ\n                elementConfig: { // タグ内に記載する要素\n                    size: 30,\n                    isHalf: false\n                },\n                value: 1, // 表示する初期値\n                validation: {},\n                valid: false, // 検査の結果有効か否か\n                touched:false,\n                label: \"見た目\"}, // タッチ済みかどうか\n        condition: {\n                elementType: 'starrating', // htmlに表示する際のタグ\n                elementConfig: { // タグ内に記載する要素\n                    size: 30,\n                    isHalf: false\n                },\n                value: 1, // 表示する初期値\n                validation: {},\n                valid: false, // 検査の結果有効か否か\n                touched:false,\n                label: \"食後の体調\"}, // タッチ済みかどうか\n        comment: {\n            elementType: \"textarea\",\n            elementConfig: {\n                text: 'text',\n                placeholder: \"例) 見た目は悪かったが、食後の体調は良好...\"\n            },\n            value: '',\n            validation: {},\n            valid: false,\n            touched:false,\n            label: \"コメント\"},\n    })\n    \n    const onChangeHandler = (event, inputIdentifier) => {\n        // 数字全角を半角に修正\n        let newValue = event.target.value;\n        if (inputIdentifier == \"expiredDays\") {\n            newValue = event.target.value.replace(/[０-９]/g, (input) => String.fromCharCode(input.charCodeAt(0)-0xFEE0))\n        }\n        const newElement = {...inputElements[inputIdentifier],\n            value: newValue,\n            valid: checkValidity(newValue, inputElements[inputIdentifier].validation),\n            touched: true};\n        setinputElements({...inputElements, [inputIdentifier]: newElement});\n    };\n\n    const onSubmitHandler = () => {\n        const newRes = {\n            expiredDays: inputElements[\"expiredDays\"].value,\n            appearance: inputElements[\"appearance\"].value,\n            taste: inputElements[\"taste\"].value,\n            condition: inputElements[\"condition\"].value,\n            comment: inputElements[\"comment\"].value,\n        }\n        props.submitted(newRes);\n\n        // フォームを初期化する\n        const newIptElm = {}\n        for (let key in inputElements) {\n            switch(inputElements[key].elementType) {\n                case \"starrating\":\n                case \"select\":\n                    newIptElm[key] = {...inputElements[key], value: 1};\n                    break;\n                default:\n                    newIptElm[key] = {...inputElements[key], value: ''}\n            }\n        }\n        setinputElements(newIptElm);\n\n        // モーダルを閉じる\n        props.modalClosed();\n    }\n\n    // フォーム表示用のオブジェクトを配列に変換\n    const iptElmArr = [];\n    for (let key in inputElements) {\n        iptElmArr.push({\n            id: key,\n            config: inputElements[key]\n        })\n    }\n\n    return (\n    <div className={classes.ResponseForm}>\n        {iptElmArr.map(e => (\n            <Input \n                key={e.id} \n                elementType={e.config.elementType}\n                elementConfig={e.config.elementConfig}\n                value={e.config.value}\n                invalid={!e.config.valid}\n                changed={(event) => onChangeHandler(event, e.id)}\n                touched={e.config.touched}\n                validation={e.config.validation}\n                label={e.config.label}\n            />\n        ))}\n        <Button \n            clicked={() => onSubmitHandler()}\n            btnType={inputElements[\"expiredDays\"].valid ? \"Success\" : \"Danger\"}\n            disabled={!inputElements[\"expiredDays\"].valid}\n            >送信</Button>\n    </div>)\n}\n\nexport default ResponseForm;","C:\\workSpace1\\react-bbs\\bbs\\src\\containers\\PostDetails\\Chart\\Chart.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Navigation\\Toolbar\\Toolbar.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\components\\UI\\Input\\Input.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Navigation\\SideDrawer\\SideDrawer.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\components\\UI\\Modal\\Modal.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\components\\UI\\Spinner\\Spinner.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\common\\commonConst.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\common\\formConst.js",["171"],"export const expiredDateSelectList = [\n    {value: 1, displayValue: \"1日\"},\n    {value: 2, displayValue: \"2日\"},\n    {value: 3, displayValue: \"3日\"},\n    {value: 5, displayValue: \"4,5日\"},\n    {value: 11, displayValue: \"1~2週間\"},\n    {value: 12, displayValue: \"2~3週間\"},\n    {value: 13, displayValue: \"3~4週間\"},\n    {value: 21, displayValue: \"1~3ヶ月\"},\n    {value: 23, displayValue: \"3~6ヶ月\"},\n    {value: 26, displayValue: \"6~9ヶ月\"},\n    {value: 29, displayValue: \"9~12ヶ月\"},\n    {value: 31, displayValue: \"1~2年\"},\n    {value: 32, displayValue: \"2~3年\"},\n    {value: 33, displayValue: \"3~5年\"},\n    {value: 35, displayValue: \"5~10年\"},\n    {value: 39, displayValue: \"10年~\"},\n];\n\n/**\n * 期限切れ後期間リストから値に相当する表示用値を取得する\n * @param {*} value \n */\nexport const getExpiredDateFromSelectVal = (value) => {\n    for(let key in expiredDateSelectList) {\n        if(expiredDateSelectList[key].value == value) {\n            return expiredDateSelectList[key].displayValue;\n        }\n    }\n    return null;\n }","C:\\workSpace1\\react-bbs\\bbs\\src\\store\\actions\\posts.js",["172"],"C:\\workSpace1\\react-bbs\\bbs\\src\\store\\actions\\auth.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\common\\cryptoConst.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Navigation\\DrawToggle\\DrawToggle.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Logo\\Logo.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\components\\UI\\Modal\\BackDrop\\BackDrop.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Navigation\\NavigationItems\\NavigationItems.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\axios-post.js",[],"C:\\workSpace1\\react-bbs\\bbs\\src\\components\\Navigation\\NavigationItems\\NavigationItem\\NavigationItem.js",[],{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","severity":1,"message":"178","line":46,"column":129,"nodeType":"179","messageId":"180","endLine":46,"endColumn":131},{"ruleId":"177","severity":1,"message":"178","line":55,"column":24,"nodeType":"179","messageId":"180","endLine":55,"endColumn":26},{"ruleId":"181","severity":1,"message":"182","line":14,"column":7,"nodeType":"183","endLine":14,"endColumn":20,"suggestions":"184"},{"ruleId":"177","severity":1,"message":"185","line":138,"column":74,"nodeType":"179","messageId":"180","endLine":138,"endColumn":76},{"ruleId":"177","severity":1,"message":"178","line":56,"column":56,"nodeType":"179","messageId":"180","endLine":56,"endColumn":58},{"ruleId":"177","severity":1,"message":"178","line":62,"column":32,"nodeType":"179","messageId":"180","endLine":62,"endColumn":34},{"ruleId":"177","severity":1,"message":"178","line":75,"column":29,"nodeType":"179","messageId":"180","endLine":75,"endColumn":31},{"ruleId":"177","severity":1,"message":"178","line":26,"column":45,"nodeType":"179","messageId":"180","endLine":26,"endColumn":47},{"ruleId":"186","severity":1,"message":"187","line":31,"column":16,"nodeType":"188","messageId":"180","endLine":31,"endColumn":21},"no-native-reassign",["189"],"no-negated-in-lhs",["190"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["191"],"Expected '!==' and instead saw '!='.","no-dupe-keys","Duplicate key 'index'.","ObjectExpression","no-global-assign","no-unsafe-negation",{"desc":"192","fix":"193"},"Update the dependencies array to be: [props, props.query]",{"range":"194","text":"195"},[319,332],"[props, props.query]"]